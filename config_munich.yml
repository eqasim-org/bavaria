## Synthetic population pipeline for Munich
## based on the synpp package

# This is the path to a directory where the pipeline can store temporary data
working_directory: /home/shoerl/tum/pipeline/cache

# This section defines which parts of the pipeline should be run
run:
  - synthesis.output

### TODO: Set matching attributes after merging the latest pipeline version

# Overrides for the Munich pipeline compared to the ÃŽle-de-France pipeline
aliases:
  data.census.filtered: germany.ipf.attributed
  synthesis.population.income: germany.income
  synthesis.population.spatial.home.zones: germany.locations.home.zones
  synthesis.locations.home.locations: germany.data.buildings
  synthesis.locations.education: germany.data.buildings
  synthesis.locations.secondary: germany.data.buildings
  synthesis.locations.work: germany.data.buildings
  data.od.weighted: germany.gravity.model
  data.spatial.iris: germany.data.spatial.iris
  data.spatial.codes: germany.entd_codes

# Here the configuraiton of the pipeline starts
config:
  # Some general configuration
  processes: 8

  # Define whether to use ENTD or EGT as the household travel survey (HTS)
  hts: entd

  # Define sampling rate and random seed for the output population
  sampling_rate: 0.01
  random_seed: 1234
  acquisition_sample_size: 1
  home_location_sampling: weighted
  mode_choice: false
  output_prefix: mun_
 
  # Paths to the input data and where the output should be stored
  data_path: /home/shoerl/tum/pipeline/data
  output_path: /home/shoerl/tum/pipeline/output

  # Only interesting if you run the simulation
  java_memory: 12G
